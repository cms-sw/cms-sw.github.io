#! /usr/bin/env python

import pickle
from os import listdir
import os
import json

DATA_DIR = 'data'
RELVALS_DIR = 'relvals'
UNIT_TESTS_DIR = 'unitTests'
SCRAM_DIR = 'scram'

#
# creates a dictionary from the results that it found in testsDir
#
def get_dict_available_results( testsDir ):

  resultsDict = {}

  if not os.path.exists( DATA_DIR + '/' + testsDir ):
    print( 'Directory not found: ' + DATA_DIR + '/' + testsDir )
    return resultsDict   

  for current_arch in listdir( DATA_DIR + '/' + testsDir ):
    for current_date in listdir( DATA_DIR + '/' + testsDir + '/' + current_arch ): 
      for current_release in listdir( DATA_DIR + '/' + testsDir + '/' + current_arch + '/' + current_date ):

        current_ib = current_release.rstrip( '.json' ) + '_' + current_date
        # to avoid confusing the INCOMPLETE, and EXCEPTIONS suffixes with a flavor
        if '_INCOMPLETE' in current_ib:
          current_ib = current_ib.replace( '_INCOMPLETE', '' ) + '_INCOMPLETE'

        if '_EXCEPTIONS' in current_ib:
          current_ib = current_ib.replace( '_EXCEPTIONS', '' ) + '_EXCEPTIONS'

        if resultsDict.get( current_ib ):
          resultsDict[ current_ib ] += ','+current_arch
        else:
          resultsDict[ current_ib ] = current_arch

        print 'found results in ', testsDir, ' for: ',  current_ib, ';', current_arch

  return resultsDict

#
# Saves the file in the desired directory
#
def saveDict( fileName, dict):
  out_json = open( fileName , "w" )
  json.dump( dict, out_json,indent=4 )
  out_json.close()

#-----------------------------------------------------------------------------------
#---- Start
#-----------------------------------------------------------------------------------

if __name__ == "__main__":

  available_results_relvals = get_dict_available_results( RELVALS_DIR )
  saveDict( 'data/RelvalsAvailableResults.json', available_results_relvals)

  available_results_utests = get_dict_available_results( UNIT_TESTS_DIR )
  saveDict( 'data/UnitTestsAvailableResults.json', available_results_utests)

  available_results_scram = get_dict_available_results( SCRAM_DIR )
  saveDict( 'data/ScramAvailableResults.json', available_results_scram)

