#!/usr/bin/env python
from argparse import ArgumentParser
from os.path import exists, join, dirname
from sys import exit
from json import dumps
import re
from operator import itemgetter
from pickle import load
import sys

RESULTS_RE = "^([0-9.]+)_([^ ]*) (.*) - time date.*exit: (.*)"
STEP_STATUS_RE = "Step([0-9])-(PASSED|FAILED|NOTRUN|DAS_ERROR|TIMEOUT)"

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("input")
  args = parser.parse_args()
  if not exists(args.input):
    print "Please specify an input file"
    exit(1)

  # Takes care of the actual results.
  buf = open(args.input).read()
  results = []
  for l in buf.split("\n"):
    r = re.match(RESULTS_RE, l)
    if not r:
      continue
    workflowId, workflow, steps, exit = r.groups()
    steps = steps.split(" ")
    stepResults = [re.match(STEP_STATUS_RE, s).group(2)
                   for s in steps if re.match(STEP_STATUS_RE, s)]
    results.append({
                   "id": workflowId,
                    "name": workflow,
                    "steps": [{"status": x} for x in stepResults],
                    "order": sum([10-i for (i, x) in enumerate(stepResults)
                                       if x == "FAILED" or x == "DAS_ERROR" or x == "TIMEOUT"])
                   })
  # Does the same for errors and warnings.
  warningsFile = join(dirname(args.input), "runTheMatrixMsgs.pkl")
  if exists(warningsFile):
    warnings = load(open(warningsFile))
    for result in results:
      if not str(result["id"]) in warnings:
        continue
      data = warnings[result["id"]]
      dlen = len(data["failed"])
      for (i, s) in enumerate(result["steps"]):
        if (i >= dlen): break
        try:
          s.update({"errors": data["failed"][i], "warnings": data["warning"][i]})
        except:
          sys.stderr.write("ERROR: Reading "+warningsFile+"\n")
          sys.stderr.write("ERROR: "+str(i)+","+str(result["id"])+","+str(data)+"\n")
          sys.exit(1)
  results.sort(key=itemgetter("order", "id"), reverse=True)
  for r in results:
    r.pop("order")
  print dumps(results, sort_keys=True, indent=4, separators=(',', ': '))
